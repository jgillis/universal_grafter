name: 'Universal grafter'
description: 'Graft all the shared libraries.'
inputs:
  source_path:
    description: 'Absolute or relative path'
    required: true
  destination_path:
    description: 'Absolute or relative path'
    required: true
  dockcross:
    description: 'specify a dockcross container (only for linux)'
    required: false
    default: 'none'
  bitness:
    description: 'bitness'
    required: false
    default: '64'
  search_paths:
    description: 'where to look for additional libraries'
    required: false
    default: ''
  skip_libs:
    description: 'libaries to ignore (colon-separated parts of filenames)'
    required: false
    default: 'libknitro:libhsl:libworhp:libsnopt7:libut:libmex:libmx:libeng'
runs:
  using: "composite"
  steps:
    - uses: conda-incubator/setup-miniconda@v2.2.0
      with:
        python-version: 3.9
        auto-update-conda: true
        channels: anaconda, conda-forge
        activate-environment: grafting
    - run: |
        echo "runner.os  ${{ runner.os }}"
      shell: bash -el {0}
    - run: pip install wheel==0.31.1
      shell: bash -el {0}
    - run: sudo apt update && sudo apt install chrpath -y
      shell: bash
      if: runner.os == 'Linux'
    - run: chrpath -l -k -r "\$ORIGIN" ${{ inputs.source_path }}/* || echo "failures"
      shell: bash
      if: runner.os == 'Linux'
    - name: Create dummy wheel from {{ inputs.source_path }}
      run: |
           ls ${{ inputs.source_path }}
           rm -f ${{ inputs.source_path }}/spral_ssids
           wheel_name=$(python ${{ github.action_path }}/create_wheel_local.py ${{ inputs.bitness }} ${{ inputs.dockcross }} ${{ inputs.source_path }})
           echo "wheel_name=$wheel_name" >> $GITHUB_ENV
      shell: bash -el {0}
      id: create-wheel
    - name: Repair wheel
      if: runner.os == 'Linux' && !contains(inputs.dockcross,'aarch64')
      run: |
        ${{ github.action_path }}/graft_linux.sh ${{ inputs.dockcross }} ${{ env.wheel_name }} ${{ inputs.skip_libs }}
      shell: bash -el {0}
    - name: Repair wheel
      if: runner.os == 'macOS'
      run: |
        pip install git+https://github.com/jgillis/delocate.git@master
        DYLD_LIBRARY_PATH=${{ inputs.search_paths }} delocate-wheel -k -w . -L "" --skip-libs "${{ inputs.skip_libs }}" ${{ env.wheel_name }}
      shell: bash -el {0}
    - name: Extract repaired wheel to {{ inputs.destination_path }}
      run: |
         unzip ${{ env.wheel_name }} -d ${{ inputs.destination_path }}
         cp -r ${{ inputs.destination_path }}/dummy/* ${{ inputs.destination_path }}
         rm -rf ${{ inputs.destination_path }}/dummy ${{ inputs.destination_path }}/dummy-1.0.dist-info
      shell: bash
    - name: Repair install names
      if: runner.os == 'macOS'
      run: python ${{ github.action_path }}/clean_install_name.py ${{ inputs.destination_path }}
      shell: bash -el {0}
